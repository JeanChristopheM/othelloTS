var F=Object.defineProperty,q=Object.defineProperties;var V=Object.getOwnPropertyDescriptors;var _=Object.getOwnPropertySymbols;var z=Object.prototype.hasOwnProperty,K=Object.prototype.propertyIsEnumerable;var I=(e,t,r)=>t in e?F(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,T=(e,t)=>{for(var r in t||(t={}))z.call(t,r)&&I(e,r,t[r]);if(_)for(var r of _(t))K.call(t,r)&&I(e,r,t[r]);return e},x=(e,t)=>q(e,V(t));import{j as G,r as w,R as D,a as $}from"./vendor.1555d296.js";const H=function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))i(o);new MutationObserver(o=>{for(const s of o)if(s.type==="childList")for(const c of s.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&i(c)}).observe(document,{childList:!0,subtree:!0});function r(o){const s={};return o.integrity&&(s.integrity=o.integrity),o.referrerpolicy&&(s.referrerPolicy=o.referrerpolicy),o.crossorigin==="use-credentials"?s.credentials="include":o.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(o){if(o.ep)return;o.ep=!0;const s=r(o);fetch(o.href,s)}};H();const M={isPlaying:!1,whosTurn:2,isGameOver:!1,shouldRestart:!1,board:[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,1,2,0,0,0],[0,0,0,2,1,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]},J=(e,t)=>{switch(t.type){case"start":return x(T({},e),{isPlaying:!e.isPlaying});case"gameOver":return x(T({},e),{isGameOver:!e.isGameOver});case"restart":return x(T({},M),{isPlaying:!0});case"switchPlayer":return x(T({},e),{whosTurn:e.whosTurn===2?1:2});case"move":const r=e.board.map((o,s)=>o.map((c,f)=>t.payload&&s===t.payload.position[0]&&f===t.payload.position[1]?t.payload.color:c));return x(T({},e),{board:r});case"convert":if(!t.payload)return e;let i=[...e.board];for(let o=0;o<t.payload.pawnsToTurn.length;o++)i=i.map((s,c)=>s.map((f,a)=>{var d,u;return c===((d=t.payload)==null?void 0:d.pawnsToTurn[o][0])&&a===((u=t.payload)==null?void 0:u.pawnsToTurn[o][1])?t.payload.color:f}));return x(T({},e),{board:i});default:return e}},P={topLeft:[-1,-1],top:[-1,0],topRight:[-1,1],right:[0,1],bottomRight:[1,1],bottom:[1,0],bottomLeft:[1,-1],left:[0,-1]},Q=[[0,1],[0,6],[1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[2,1],[2,6],[3,1],[3,6],[4,1],[4,6],[5,1],[5,6],[6,0],[6,1],[6,2],[6,3],[6,4],[6,5],[6,6],[6,7],[7,1],[7,6]],U=[[0,0],[0,7],[7,0],[7,7]],X=({position:e,color:t,currentBoard:r})=>r[e[0]][e[1]]!==0?!0:r[e[0]][e[1]],L=({position:e,color:t,currentBoard:r})=>{let i=!1,o="Illegal move : ";if(X({position:e,color:t,currentBoard:r}))return{takes:i,error:o};let s=[];const c=t===2?1:2;for(let a in P){const d=()=>s.push(!1);let u=[];for(let l=1;l<=7&&!(!r[e[0]+P[a][0]*l]||!r[e[0]+P[a][0]*l][e[1]+P[a][1]*l]);l++){const y=r[e[0]+P[a][0]*l][e[1]+P[a][1]*l],v=[e[0]+P[a][0]*l,e[1]+P[a][1]*l];if(l===1&&y!==c)break;u.push([y,v])}if(u.length===0){d();continue}const m=u.map(l=>l[0]);if(m.includes(t)){const l=m.indexOf(t),y=m.map((v,b)=>b>l?"toofar":b===l?"friend":v===c?"foe":"error");if(y.includes("error")){d();continue}else{let v=[];y.forEach((b,S)=>{b==="foe"&&S<l&&v.push(u[S][1])}),s.push(v)}}else{d();continue}}const f=new Set(s);return f.size>1&&(i=[],f.forEach(a=>{a!==!1&&a.forEach(d=>i.push(d))})),{takes:i,error:o}},B=(e,t)=>{const r=[];return e.forEach((i,o)=>{i.forEach((s,c)=>{const f=[o,c];L({position:f,color:t,currentBoard:e}).takes!==!1&&r.push(f)})}),r.length>0?r:!1};//! ATTENTION, IF 1212* where * = new move from white
//! turns into 11111 instead of 12111
const Y=(e,t,r)=>{const i=t,o=B(i,r);if(!o)return;const s=o.map(d=>{let u,m,l,y;const v=d,S=L({position:v,color:1,currentBoard:i}).takes;return S?(m=S.length>10?10:S.length,y=Q.some(h=>h.every((k,g)=>k===v[g]))?0:10,l=U.some(h=>h.every((k,g)=>k===v[g]))?10:0,u=y+l+m,u):void 0}),c=s.reduce((d,u)=>u>d?u:d,0),f=s.indexOf(c),a=o[f];e({type:"move",payload:{position:a,color:r}}),e({type:"convert",payload:{pawnsToTurn:L({position:a,color:r,currentBoard:i}).takes,color:r}}),e({type:"switchPlayer"})},N=(e,t)=>t.reduce((r,i)=>{const o=i.reduce((s,c)=>c===e?s+1:s,0);return r+o},0),n=G.exports.jsx,p=G.exports.jsxs,Z=G.exports.Fragment,W=()=>n("div",{className:"wP"}),j=()=>n("div",{className:"bP"}),ee=({board:e,state:t,dispatch:r,winner:i,legalMoves:o})=>{const s=c=>{const a=c.target.id.split(",").map(l=>parseInt(l)),d=t.whosTurn,u=t.board,m=L({position:a,color:d,currentBoard:u});!m.takes||(r({type:"move",payload:{position:a,color:d}}),r({type:"convert",payload:{pawnsToTurn:m.takes,color:d}}),r({type:"switchPlayer"}))};return p("div",{className:"boardContainer",children:[n("div",{className:"board",children:e.map((c,f)=>c.map((a,d)=>{const u=[f,d];let m=!1;return o.forEach(l=>{l.every((v,b)=>v===u[b])&&(m=!0)}),n("div",{className:m?"cell legal":"cell",id:u.toString(),onClick:s,children:a?a===1?n(W,{}):n(j,{}):null},u.toString())}))}),t.isGameOver&&p("div",{id:"gameOverScreen",children:[n("h2",{children:"Game Over"}),p("h1",{children:[i," Won"]})]}),!t.isPlaying&&n("div",{id:"gamePausedScreen",children:"Game Paused"})]})},te=()=>{const[e,t]=w.exports.useReducer(J,M),[r,i]=w.exports.useState(N(2,e.board)),[o,s]=w.exports.useState(N(1,e.board)),[c,f]=w.exports.useState([]),[a,d]=w.exports.useState([]),[u,m]=w.exports.useState(0),l=[0,"White","Black"],y=w.exports.useRef(null),v=w.exports.useRef(null);w.exports.useEffect(()=>{var C,O;if(e.isGameOver||!e.isPlaying)return;d(R=>[...R,e.board]);const h=N(2,e.board);i(h);const k=N(1,e.board);s(k);const g=B(e.board,e.whosTurn);if(g)f(g);else{f([]);const R=e.whosTurn===2?1:2;B(e.board,R)?(alert(`Switching ${l[e.whosTurn]}'s turn because he has no legal moves`),t({type:"switchPlayer"})):t({type:"gameOver"})}e.isPlaying&&e.whosTurn===2?(C=document.querySelector(".boardContainer"))==null||C.classList.add("active"):((O=document.querySelector(".boardContainer"))==null||O.classList.remove("active"),Y(t,e.board,1))},[e]);const b=h=>{h.code==="ArrowLeft"&&y.current.click(),h.code==="ArrowRight"&&v.current.click()},S=h=>{var k,g;((k=h.target)==null?void 0:k.id)==="leftBtn"&&A(),((g=h.target)==null?void 0:g.id)==="rightBtn"&&E()};w.exports.useEffect(()=>(document.addEventListener("keydown",b),()=>document.removeEventListener("keydown",b)),[]);const A=()=>{m(h=>h===0?h:h-1)},E=()=>{m(h=>h===a.length-1?h:h+1)};return p("div",{className:"gameContainer",children:[p("div",{className:"gameContainer__board",children:[p("div",{className:"boardControls",children:[n("button",{type:"button",onClick:()=>t({type:"start"}),children:e.isPlaying?"Pause Game":"Start Game"}),e.isPlaying?n("button",{type:"button",onClick:()=>{m(0),d([]),t({type:"restart"})},children:"Restart Game"}):null]}),n("div",{className:"gameInfo",children:p("p",{children:[l[e.whosTurn],"'s turn"]})}),n(ee,{board:e.board,canPlay:e.isPlaying&&e.whosTurn===2,state:e,dispatch:t,winner:r>o?"Black":"White",legalMoves:c})]}),p("div",{className:"scoreContainer",children:[n("h2",{children:"Score"}),p("div",{children:["Black : ",r," pawns"]}),p("div",{children:["White : ",o," pawns"]})]}),p("div",{className:"cheatInspector",children:[n("h2",{children:"Cheat Inspector"}),p("div",{className:"prevSelector",children:[p("div",{className:"prevSelector__info",children:["Turn n\xB0",u,"/",a.length-1<0?0:a.length-1]}),p("div",{className:"prevSelector__controls",children:[n("span",{onClick:S,style:{cursor:"pointer"},id:"leftBtn",ref:y,children:"<"}),n("span",{onClick:S,style:{cursor:"pointer"},id:"rightBtn",ref:v,children:">"})]})]}),n("div",{className:"prev",children:a.length>0&&a[u].map((h,k)=>h.map((g,C)=>{const O=[k,C];return n("div",{className:"cell",id:O.toString(),children:g?g===1?n(W,{}):n(j,{}):null},"d"+O.toString())}))})]})]})};function re(){return n(Z,{children:p("main",{children:[n("h1",{children:"Othello"}),p("div",{className:"rules",children:[n("h3",{className:"rules__title",onClick:()=>{const t=document.querySelector(".rules__content");!t||t.classList.toggle("active")},children:"Rules"}),p("div",{className:"rules__content",children:[n("h3",{children:"Goal of the game : "}),n("p",{children:"The goal is to get the majority of colour discs on the board at the end of the game."}),n("h3",{children:"Gameplay : "}),n("p",{children:"The game alternates between white and black until:"}),p("ol",{children:[p("li",{children:["One player can not make a valid move to outflank the opponent."," "]}),n("li",{children:"Both players have no valid moves."})]}),n("p",{children:"When a player has no valid moves, he pass his turn and the opponent continues."}),n("p",{children:"A player can not voluntarily forfeit his turn."}),n("p",{children:"When both players can not make a valid move the game ends."}),n("h3",{children:"Legal Move : "}),n("p",{children:"Black always moves first."}),n("p",{children:`A move is made by placing a disc of the player's color on the board in a position that "out-flanks" one or more of the opponent's discs.`}),n("p",{children:"A disc or row of discs is outflanked when it is surrounded at the ends by discs of the opposite color."}),n("p",{children:"A disc may outflank any number of discs in one or more rows in any direction (horizontal, vertical, diagonal)."})]})]}),n(te,{})]})})}D.render(n($.StrictMode,{children:n(re,{})}),document.getElementById("root"));
