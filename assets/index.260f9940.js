var F=Object.defineProperty,V=Object.defineProperties;var $=Object.getOwnPropertyDescriptors;var G=Object.getOwnPropertySymbols;var z=Object.prototype.hasOwnProperty,D=Object.prototype.propertyIsEnumerable;var _=(e,t,n)=>t in e?F(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,k=(e,t)=>{for(var n in t||(t={}))z.call(t,n)&&_(e,n,t[n]);if(G)for(var n of G(t))D.call(t,n)&&_(e,n,t[n]);return e},S=(e,t)=>V(e,$(t));import{j as E,r as w,R as K,a as Q}from"./vendor.1555d296.js";const Y=function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))c(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const u of o.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&c(u)}).observe(document,{childList:!0,subtree:!0});function n(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerpolicy&&(o.referrerPolicy=s.referrerpolicy),s.crossorigin==="use-credentials"?o.credentials="include":s.crossorigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function c(s){if(s.ep)return;s.ep=!0;const o=n(s);fetch(s.href,o)}};Y();const r=E.exports.jsx,m=E.exports.jsxs,H=E.exports.Fragment,W=()=>r("div",{className:"wP"}),j=()=>r("div",{className:"bP"}),J=()=>r("div",{className:"wP new"}),U=()=>r("div",{className:"bP new"});function X({selectedState:e,handleClick:t,prevRef:n,nextRef:c,previousState:s}){return m("div",{className:"cheatInspector",children:[r("h2",{children:"Cheat Inspector"}),m("div",{className:"prevSelector",children:[m("div",{className:"prevSelector__info",children:["Turn n\xB0",e,"/",s.length-1<0?0:s.length-1]}),m("div",{className:"prevSelector__controls",children:[r("span",{onClick:t,style:{cursor:"pointer"},id:"leftBtn",ref:n,children:"<"}),r("span",{onClick:t,style:{cursor:"pointer"},id:"rightBtn",ref:c,children:">"})]})]}),r("div",{className:"prev",children:s.length>0&&s[e].map((o,u)=>o.map((i,l)=>{const d=[u,l];return r("div",{className:"cell",id:d.toString(),children:i?i===1?r(W,{}):r(j,{}):null},"d"+d.toString())}))})]})}const N={topLeft:[-1,-1],top:[-1,0],topRight:[-1,1],right:[0,1],bottomRight:[1,1],bottom:[1,0],bottomLeft:[1,-1],left:[0,-1]},Z=[[0,1],[0,6],[1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[2,1],[2,6],[3,1],[3,6],[4,1],[4,6],[5,1],[5,6],[6,0],[6,1],[6,2],[6,3],[6,4],[6,5],[6,6],[6,7],[7,1],[7,6]],ee=[[0,0],[0,7],[7,0],[7,7]],O=[0,"White","Black"],te=0,re=e=>e===2?4:3,q={isPlaying:!1,whosTurn:2,isGameOver:!1,shouldRestart:!1,animating:!1,board:[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,1,2,0,0,0],[0,0,0,2,1,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]},ne=(e,t)=>{if(!t)return e;switch(t.type){case"animate":return S(k({},e),{animating:!0});case"animateStop":return S(k({},e),{animating:!1});case"start":return S(k({},e),{isPlaying:!e.isPlaying});case"gameOver":return S(k({},e),{isGameOver:!e.isGameOver});case"restart":return S(k({},q),{isPlaying:!0});case"switchPlayer":return console.log(`${O[e.whosTurn]}'s turn over. Switching to ${e.whosTurn===2?O[1]:O[2]}`),S(k({},e),{whosTurn:e.whosTurn===2?1:2});case"move":const n=e.board.map((o,u)=>o.map((i,l)=>t.payload&&u===t.payload.position[0]&&l===t.payload.position[1]?t.payload.color:i));return S(k({},e),{board:n});case"convert":if(!t.payload)return e;let c=[...e.board];for(let o=0;o<t.payload.pawnsToTurn.length;o++)c=c.map((u,i)=>u.map((l,d)=>{var h,p;return i===((h=t.payload)==null?void 0:h.pawnsToTurn[o][0])&&d===((p=t.payload)==null?void 0:p.pawnsToTurn[o][1])?re(t.payload.color):l}));return S(k({},e),{board:c});case"eraseAnimation":let s=e.board.map((o,u)=>o.map((i,l)=>i===3?1:i===4?2:i));return S(k({},e),{board:s});default:return e}},oe=({position:e,color:t,currentBoard:n})=>n[e[0]][e[1]]!==0?!0:n[e[0]][e[1]],R=({position:e,color:t,currentBoard:n})=>{let c=!1,s="Illegal move : ";if(oe({position:e,color:t,currentBoard:n}))return{takes:c,error:s};let o=[];const u=t===2?1:2;for(let l in N){const d=()=>o.push(!1);let h=[];for(let a=1;a<=7&&!(!n[e[0]+N[l][0]*a]||!n[e[0]+N[l][0]*a][e[1]+N[l][1]*a]);a++){const f=n[e[0]+N[l][0]*a][e[1]+N[l][1]*a],y=[e[0]+N[l][0]*a,e[1]+N[l][1]*a];if(a===1&&f!==u)break;h.push([f,y])}if(h.length===0){d();continue}const p=h.map(a=>a[0]);if(p.includes(t)){const a=p.indexOf(t),f=p.map((y,v)=>v>a?"toofar":v===a?"friend":y===u?"foe":"error");if(f.includes("error")){d();continue}else{let y=[];f.forEach((v,T)=>{v==="foe"&&T<a&&y.push(h[T][1])}),o.push(y)}}else{d();continue}}const i=new Set(o);return i.size>1&&(c=[],i.forEach(l=>{l!==!1&&l.forEach(d=>c.push(d))})),{takes:c,error:s}},B=(e,t)=>{const n=[];return e.forEach((c,s)=>{c.forEach((o,u)=>{const i=[s,u];R({position:i,color:t,currentBoard:e}).takes!==!1&&n.push(i)})}),n.length>0?n:!1};//! ATTENTION, IF 1212* where * = new move from white
//! turns into 11111 instead of 12111
const se=(e,t,n)=>{const c=e,s=B(c,t);if(!s)return;const o=s.map(a=>{let f,y,v,T;const g=a,P=R({position:g,color:1,currentBoard:c}).takes;return P?(y=P.length>10?10:P.length,T=Z.some(x=>x.every((L,A)=>L===g[A]))?0:10,v=ee.some(x=>x.every((L,A)=>L===g[A]))?10:0,f=T+v+y,f):void 0}),u=o.reduce((a,f)=>f>a?f:a,0),i=o.indexOf(u),l=s[i],d=R({position:l,color:t,currentBoard:c});if(typeof d.takes=="boolean")return;const h=d.takes.map(a=>({type:"convert",payload:{pawnsToTurn:[a],color:t}})),p=[{type:"animate"},{type:"move",payload:{position:l,color:t}},...h,{type:"eraseAnimation"},{type:"switchPlayer"},{type:"animateStop"}];n(p)},M=(e,t)=>t.reduce((n,c)=>{const s=c.reduce((o,u)=>u===e?o+1:o,0);return n+s},0),ae=({score:e})=>m("div",{className:"scoreContainer",children:[r("h2",{children:"Score"}),m("div",{children:["Black : ",e.black," pawns"]}),m("div",{children:["White : ",e.white," pawns"]})]}),ie=({board:e,state:t,winner:n,legalMoves:c,setQueue:s})=>{const o=async i=>{const d=i.target.id.split(",").map(v=>parseInt(v)),h=t.whosTurn,p=t.board,a=R({position:d,color:h,currentBoard:p});if(!a.takes||a.takes===!0)return;const f=a.takes.map(v=>({type:"convert",payload:{pawnsToTurn:[v],color:h}})),y=[{type:"animate"},{type:"move",payload:{position:d,color:h}},...f,{type:"eraseAnimation"},{type:"switchPlayer"},{type:"animateStop"}];s(y)},u=i=>{switch(i){case 0:return null;case 1:return r(W,{});case 2:return r(j,{});case 3:return r(J,{});case 4:return r(U,{});default:return 0}};return m("div",{className:"boardContainer",children:[r("div",{className:"board",children:e.map((i,l)=>i.map((d,h)=>{const p=[l,h];let a=!1;return c.forEach(f=>{f.every((v,T)=>v===p[T])&&(a=!0)}),r("div",{className:a?"cell legal":"cell",id:p.toString(),onClick:o,children:u(d)},p.toString())}))}),t.isGameOver&&m("div",{id:"gameOverScreen",children:[r("h2",{children:"Game Over"}),m("h1",{children:[n," Won"]})]}),!t.isPlaying&&r("div",{id:"gamePausedScreen",children:"Game Paused"})]})},le=({whosTurn:e})=>r("div",{className:"gameInfo",children:m("p",{children:[e,"'s turn"]})}),ce=()=>{const[e,t]=w.exports.useReducer(ne,q),[n,c]=w.exports.useState({black:0,white:0}),[s,o]=w.exports.useState([]),[u,i]=w.exports.useState([]),[l,d]=w.exports.useState(0),[h,p]=w.exports.useState([]);w.exports.useState(!0);const a=w.exports.useRef(null),f=w.exports.useRef(null),y=w.exports.useRef();w.exports.useEffect(()=>{var b,I;if(e.isGameOver||!e.isPlaying||e.animating)return;i(x=>[...x,e.board]);const g=M(2,e.board),C=M(1,e.board);c({black:g,white:C});const P=B(e.board,e.whosTurn);if(P)if(o(P),e.whosTurn===2)(b=document.querySelector(".boardContainer"))==null||b.classList.add("active");else{(I=document.querySelector(".boardContainer"))==null||I.classList.remove("active");const x=setTimeout(()=>{se(e.board,1,p)},te);y.current=x}else{o([]);const x=e.whosTurn===2?1:2;B(e.board,x)?(alert(`Skipping ${O[e.whosTurn]}'s turn because he has no legal moves`),t({type:"switchPlayer"})):t({type:"gameOver"})}return()=>{clearTimeout(y.current)}},[e]);const v=g=>{g.code==="ArrowLeft"&&a.current.click(),g.code==="ArrowRight"&&f.current.click()},T=g=>{var C,P;((C=g.target)==null?void 0:C.id)==="leftBtn"&&d(b=>b===0?b:b-1),((P=g.target)==null?void 0:P.id)==="rightBtn"&&d(b=>b===u.length-1?b:b+1)};return w.exports.useEffect(()=>(console.log("mounted game"),document.addEventListener("keydown",v),()=>{document.removeEventListener("keydown",v),console.log("unmounted game")}),[]),w.exports.useEffect(()=>{if(!h||h.length===0)return;const g=setInterval(()=>{t(h[0]),p(C=>C.slice(1))},250);return()=>{clearInterval(g)}},[h]),m("div",{className:"gameContainer",children:[m("div",{className:"gameContainer__board",children:[m("div",{className:"boardControls",children:[r("button",{type:"button",onClick:()=>t({type:"start"}),children:e.isPlaying?"Pause Game":"Start Game"}),e.isPlaying?r("button",{type:"button",onClick:()=>{d(0),i([]),t({type:"restart"})},children:"Restart Game"}):null]}),r(le,{whosTurn:O[e.whosTurn]}),r(ie,{board:e.board,canPlay:e.isPlaying&&e.whosTurn===2,state:e,winner:n.black>n.white?"Black":"White",legalMoves:s,setQueue:p})]}),r(ae,{score:n}),r(X,{previousState:u,selectedState:l,handleClick:T,prevRef:a,nextRef:f})]})};function ue(){return r(H,{children:m("main",{children:[r("h1",{children:"Othello"}),m("div",{className:"rules",children:[r("h3",{className:"rules__title",onClick:()=>{const t=document.querySelector(".rules__content");!t||t.classList.toggle("active")},children:"Rules"}),m("div",{className:"rules__content",children:[r("h3",{children:"Goal of the game : "}),r("p",{children:"The goal is to get the majority of colour discs on the board at the end of the game."}),r("h3",{children:"Gameplay : "}),r("p",{children:"The game alternates between white and black until:"}),m("ol",{children:[m("li",{children:["One player can not make a valid move to outflank the opponent."," "]}),r("li",{children:"Both players have no valid moves."})]}),r("p",{children:"When a player has no valid moves, he pass his turn and the opponent continues."}),r("p",{children:"A player can not voluntarily forfeit his turn."}),r("p",{children:"When both players can not make a valid move the game ends."}),r("h3",{children:"Legal Move : "}),r("p",{children:"Black always moves first."}),r("p",{children:`A move is made by placing a disc of the player's color on the board in a position that "out-flanks" one or more of the opponent's discs.`}),r("p",{children:"A disc or row of discs is outflanked when it is surrounded at the ends by discs of the opposite color."}),r("p",{children:"A disc may outflank any number of discs in one or more rows in any direction (horizontal, vertical, diagonal)."})]})]}),r(ce,{})]})})}K.render(r(Q.StrictMode,{children:r(ue,{})}),document.getElementById("root"));
